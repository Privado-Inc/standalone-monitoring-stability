{
  "privadoCoreVersion" : "1.1.2",
  "privadoCLIVersion" : "v2.1.1",
  "privadoMainVersion" : "1.1.1\n",
  "createdAt" : 1669015007751,
  "repoName" : "BankingSystem-Backend",
  "gitMetadata" : {
    "branchName" : "master",
    "commitId" : "424a3c725416e6c2a29fc22185a869c5056ebfd3",
    "remoteUrl" : "https://github.com/saurabh-sudo/BankingSystem-Backend.git"
  },
  "localScanPath" : "/home/Privado/BankingSystem-Backend",
  "sources" : [
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.LanguagePreferences",
      "name" : "Language Preferences",
      "category" : "Account Data",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountID",
      "name" : "Account ID",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.FirstName",
      "name" : "First Name",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountPassword",
      "name" : "Account Password",
      "category" : "Account Data",
      "sensitivity" : "high",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.DateofBirth",
      "name" : "Date of Birth",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.LastName",
      "name" : "Last Name",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.EmailAddress",
      "name" : "Email Address",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.Age",
      "name" : "Age",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.NationalIdentificationNumbers.Passport",
      "name" : "Passport",
      "category" : "National Identification Numbers",
      "sensitivity" : "high",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.PhoneNumber",
      "name" : "Phone Number",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountName",
      "name" : "Account Name",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    }
  ],
  "processing" : [
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
      "occurrences" : [
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 21,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "account",
          "lineNumber" : 86,
          "columnNumber" : 25,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
        },
        {
          "sample" : "proof",
          "lineNumber" : 144,
          "columnNumber" : 22,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "    public Proof getProof() {\n        return proof;\n    }\n\n    public void setProof(Proof proof) {\n        this.proof = proof; /* <=== */ \n    }\n\n    public String getFirstName() {\n        return firstName;\n    }"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
      "occurrences" : [
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 21,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "account",
          "lineNumber" : 86,
          "columnNumber" : 25,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
        },
        {
          "sample" : "proof",
          "lineNumber" : 144,
          "columnNumber" : 22,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "    public Proof getProof() {\n        return proof;\n    }\n\n    public void setProof(Proof proof) {\n        this.proof = proof; /* <=== */ \n    }\n\n    public String getFirstName() {\n        return firstName;\n    }"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
      "occurrences" : [
        {
          "sample" : "password",
          "lineNumber" : 73,
          "columnNumber" : 16,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
          "excerpt" : "        String lowerCaseLetters = \"abcdefghijklmnopqrstuvwxyz\";\n        String specialCharacters = \"!@#$\";\n        String numbers = \"1234567890\";\n        String combinedChars = capitalCaseLetters + lowerCaseLetters + specialCharacters + numbers;\n        Random random = new Random();\n        char[] password = new char[length]; /* <=== */ \n\n        password[0] = lowerCaseLetters.charAt(random.nextInt(lowerCaseLetters.length()));\n        password[1] = capitalCaseLetters.charAt(random.nextInt(capitalCaseLetters.length()));\n        password[2] = specialCharacters.charAt(random.nextInt(specialCharacters.length()));\n        password[3] = numbers.charAt(random.nextInt(numbers.length()));"
        },
        {
          "sample" : "primaryAccount",
          "lineNumber" : 49,
          "columnNumber" : 25,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
        },
        {
          "sample" : "customer",
          "lineNumber" : 80,
          "columnNumber" : 42,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
          "excerpt" : "        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer);\n                return ResponseEntity.ok(customer); /* <=== */ \n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n            }"
        },
        {
          "sample" : "user",
          "lineNumber" : 27,
          "columnNumber" : 7,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
          "excerpt" : "\tprivate CustomerDao customerDao;\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username);\n\t\tif (user == null) { /* <=== */ \n\t\t\tLOG.warn(\"Username {} not found\", username);\n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);\n\t}"
        },
        {
          "sample" : "this",
          "lineNumber" : 34,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Customer.java",
          "excerpt" : "    public Customer(final Customer o) {\n        this.customerId=o.customerId;\n        this.customerName=o.customerName;\n        this.userName=o.userName;\n        this.password=o.password;\n        this.token=o.token; /* <=== */ \n      //  this.accountId=o.accountId;\n        this.accounts=o.accounts;\n\n\n"
        },
        {
          "sample" : "acc1",
          "lineNumber" : 110,
          "columnNumber" : 38,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }\n            return ResponseEntity.ok(acc1); /* <=== */ \n        } catch (Exception e) {\n            System.out.println(\"Error is \" + e);\n            return new ResponseEntity<>(e.getMessage(), new HttpHeaders(), HttpStatus.BAD_REQUEST);\n        }\n    }"
        },
        {
          "sample" : "customers",
          "lineNumber" : 15,
          "columnNumber" : 15,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/CustomCustomerDetails.java",
          "excerpt" : "\npublic class CustomCustomerDetails extends Customer implements UserDetails {\n\n    public CustomCustomerDetails(final Customer customers)\n    {\n        super(customers); /* <=== */ \n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n"
        },
        {
          "sample" : "account",
          "lineNumber" : 67,
          "columnNumber" : 17,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
          "excerpt" : "\n\n    @GetMapping(\"/balance/{accountId}\")\n    public ResponseEntity getBalance(@PathVariable long accountId) {\n\n        Account account = accountDao.findByAccountId(accountId); /* <=== */ \n        return ResponseEntity.ok(account);\n    }\n\n    @GetMapping(\"/balanceAmountOnly/{accountId}\")\n    public ResponseEntity balanceAmountOnly(@PathVariable long accountId) {"
        },
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 17,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
          "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
        },
        {
          "sample" : "\"MVNW_PASSWORD\"",
          "lineNumber" : 100,
          "columnNumber" : 45,
          "fileName" : "/app/code/OnlineBanking/.mvn/wrapper/MavenWrapperDownloader.java",
          "excerpt" : "    }\n\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n            String username = System.getenv(\"MVNW_USERNAME\");\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray(); /* <=== */ \n            Authenticator.setDefault(new Authenticator() {\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(username, password);\n                }"
        },
        {
          "sample" : "$obj1",
          "lineNumber" : -1,
          "columnNumber" : -1,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/AuthenticationProvider.java",
          "excerpt" : ""
        },
        {
          "sample" : "enteredPassword",
          "lineNumber" : 54,
          "columnNumber" : 48,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
          "excerpt" : "\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) { /* <=== */ \n                String token = UUID.randomUUID().toString();\n                admin.setToken(token);\n                adminDao.save(admin);\n                return ResponseEntity.ok(admin);\n            } else {"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountName",
      "occurrences" : [
        {
          "sample" : "o.userName",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Admin.java",
          "excerpt" : "private String token;\n    public Admin(Admin o) {\n        this.adminId=o.adminId;\n        this.adminName=o.adminName;\n        this.adminRole=o.adminRole;\n        this.userName=o.userName; /* <=== */ \n        this.bankIFSC=o.bankIFSC;\n        this.passwordHash=o.passwordHash;\n        this.token=o.token;\n    }\n"
        },
        {
          "sample" : "primaryAccount",
          "lineNumber" : 49,
          "columnNumber" : 25,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
        },
        {
          "sample" : "customer",
          "lineNumber" : 80,
          "columnNumber" : 42,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
          "excerpt" : "        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer);\n                return ResponseEntity.ok(customer); /* <=== */ \n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n            }"
        },
        {
          "sample" : "user",
          "lineNumber" : 27,
          "columnNumber" : 7,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
          "excerpt" : "\tprivate CustomerDao customerDao;\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username);\n\t\tif (user == null) { /* <=== */ \n\t\t\tLOG.warn(\"Username {} not found\", username);\n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);\n\t}"
        },
        {
          "sample" : "acc1",
          "lineNumber" : 110,
          "columnNumber" : 38,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }\n            return ResponseEntity.ok(acc1); /* <=== */ \n        } catch (Exception e) {\n            System.out.println(\"Error is \" + e);\n            return new ResponseEntity<>(e.getMessage(), new HttpHeaders(), HttpStatus.BAD_REQUEST);\n        }\n    }"
        },
        {
          "sample" : "admin",
          "lineNumber" : 58,
          "columnNumber" : 42,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
          "excerpt" : "        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();\n                admin.setToken(token);\n                adminDao.save(admin);\n                return ResponseEntity.ok(admin); /* <=== */ \n            } else {\n                return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n            }\n        }\n    }"
        },
        {
          "sample" : "\"MVNW_USERNAME\"",
          "lineNumber" : 106,
          "columnNumber" : 45,
          "fileName" : "/app/code/BackOfficeSystem/.mvn/wrapper/MavenWrapperDownloader.java",
          "excerpt" : "        }\n    }\n\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n            String username = System.getenv(\"MVNW_USERNAME\"); /* <=== */ \n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n            Authenticator.setDefault(new Authenticator() {\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(username, password);"
        },
        {
          "sample" : "customers",
          "lineNumber" : 15,
          "columnNumber" : 15,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/CustomCustomerDetails.java",
          "excerpt" : "\npublic class CustomCustomerDetails extends Customer implements UserDetails {\n\n    public CustomCustomerDetails(final Customer customers)\n    {\n        super(customers); /* <=== */ \n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n"
        },
        {
          "sample" : "admins",
          "lineNumber" : 17,
          "columnNumber" : 15,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/CustomAdminDetails.java",
          "excerpt" : "\npublic class CustomAdminDetails extends Admin implements UserDetails {\n\n    public CustomAdminDetails(final Admin admins)\n    {\n        super(admins); /* <=== */ \n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n"
        },
        {
          "sample" : "o",
          "lineNumber" : 30,
          "columnNumber" : 25,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Customer.java",
          "excerpt" : "    private Set<Account> accounts;\n\n    private String token;\n\n    public Customer(final Customer o) {\n        this.customerId=o.customerId; /* <=== */ \n        this.customerName=o.customerName;\n        this.userName=o.userName;\n        this.password=o.password;\n        this.token=o.token;\n      //  this.accountId=o.accountId;"
        },
        {
          "sample" : "account",
          "lineNumber" : 67,
          "columnNumber" : 17,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
          "excerpt" : "\n\n    @GetMapping(\"/balance/{accountId}\")\n    public ResponseEntity getBalance(@PathVariable long accountId) {\n\n        Account account = accountDao.findByAccountId(accountId); /* <=== */ \n        return ResponseEntity.ok(account);\n    }\n\n    @GetMapping(\"/balanceAmountOnly/{accountId}\")\n    public ResponseEntity balanceAmountOnly(@PathVariable long accountId) {"
        },
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 17,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
          "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
        },
        {
          "sample" : "$obj1",
          "lineNumber" : -1,
          "columnNumber" : -1,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/AuthenticationProvider.java",
          "excerpt" : ""
        },
        {
          "sample" : "ud",
          "lineNumber" : 32,
          "columnNumber" : 39,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/service/AuthenticationProvider.java",
          "excerpt" : "        Object token = usernamePasswordAuthenticationToken.getCredentials();\n        Admin ud = adminDao.findByToken(token.toString());\n        if (ud == null) {\n            throw new UsernameNotFoundException(\"Cannot find user with authentication token=\" + token);\n        }\n        return new CustomAdminDetails(ud); /* <=== */ \n    }\n\n}"
        },
        {
          "sample" : "\"spring.datasource.username\"",
          "lineNumber" : 29,
          "columnNumber" : 56,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBConfig.java",
          "excerpt" : "    @Order(1)\n    public DataSource datasource() {\n        final DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setDriverClassName(environment.getProperty(\"spring.datasource.driver-class-name\"));\n        dataSource.setUrl(environment.getProperty(\"spring.datasource.url\"));\n        dataSource.setUsername(environment.getProperty(\"spring.datasource.username\")); /* <=== */ \n        dataSource.setPassword(environment.getProperty(\"spring.datasource.password\"));\n        return dataSource;\n    }\n\n"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
      "occurrences" : [
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 21,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "account",
          "lineNumber" : 86,
          "columnNumber" : 25,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
        },
        {
          "sample" : "this.firstName",
          "lineNumber" : 188,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "//    }\n\n    public Account(long id, String bankIfsc, String firstName, String lastName, double balance, Date date, int accountStatus, Proof proof, Customer customer, long accountId, String remarks) {\n        this.id = id;\n        this.bankIfsc = bankIfsc;\n        this.firstName = firstName; /* <=== */ \n        this.lastName = lastName;\n        this.balance = balance;\n        this.date = date;\n        this.accountStatus = accountStatus;\n        this.proof = proof;"
        },
        {
          "sample" : "RecipientAccount",
          "lineNumber" : 42,
          "columnNumber" : 26,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
          "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
      "occurrences" : [
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 21,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "account",
          "lineNumber" : 86,
          "columnNumber" : 25,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
        },
        {
          "sample" : "lastName",
          "lineNumber" : 160,
          "columnNumber" : 25,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName; /* <=== */ \n    }\n\n\n    public Date getDate() {\n        return date;"
        },
        {
          "sample" : "RecipientAccount",
          "lineNumber" : 42,
          "columnNumber" : 26,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
          "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.LanguagePreferences",
      "occurrences" : [
        {
          "sample" : "language",
          "lineNumber" : 24,
          "columnNumber" : 20,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
          "excerpt" : "        {\n\n            String apiKey=\"Your API Key here\";\n            String sendId=\"FSTSMS\";\n\n            String language=\"english\"; /* <=== */ \n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
      "occurrences" : [
        {
          "sample" : "p",
          "lineNumber" : 56,
          "columnNumber" : 20,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
          "excerpt" : "\n        Set<PrimaryTransaction> pt = transferService.getTransactionHistoryByAccountID(accountId);\n        List<PrimaryTransaction> pp = new ArrayList<>();\n        for (PrimaryTransaction p : pt\n        ) {\n            pp.add(p); /* <=== */ \n        }\n\n        return ResponseEntity.ok(pp);\n\n    }"
        },
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 21,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
        },
        {
          "sample" : "transaction",
          "lineNumber" : 96,
          "columnNumber" : 110,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
          "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "account",
          "lineNumber" : 86,
          "columnNumber" : 25,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
        },
        {
          "sample" : "this.phoneNo",
          "lineNumber" : 85,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "    public long getPhoneNo() {\n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno; /* <=== */ \n    }\n\n    public long getId() {\n        return id;\n    }"
        },
        {
          "sample" : "phoneNo",
          "lineNumber" : 159,
          "columnNumber" : 18,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
          "excerpt" : "\tpublic long getPhoneNo() {\n\t\treturn phoneNo;\n\t}\n\n\tpublic void setPhoneNo(long phoneNo) {\n\t\tthis.phoneNo = phoneNo; /* <=== */ \n\t}\n\n\n\tpublic long getAccountId() {\n\t\treturn accountId;"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
      "occurrences" : [
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 21,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "account",
          "lineNumber" : 86,
          "columnNumber" : 25,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
        },
        {
          "sample" : "proof",
          "lineNumber" : 144,
          "columnNumber" : 22,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "    public Proof getProof() {\n        return proof;\n    }\n\n    public void setProof(Proof proof) {\n        this.proof = proof; /* <=== */ \n    }\n\n    public String getFirstName() {\n        return firstName;\n    }"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountID",
      "occurrences" : [
        {
          "sample" : "p",
          "lineNumber" : 56,
          "columnNumber" : 20,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
          "excerpt" : "\n        Set<PrimaryTransaction> pt = transferService.getTransactionHistoryByAccountID(accountId);\n        List<PrimaryTransaction> pp = new ArrayList<>();\n        for (PrimaryTransaction p : pt\n        ) {\n            pp.add(p); /* <=== */ \n        }\n\n        return ResponseEntity.ok(pp);\n\n    }"
        },
        {
          "sample" : "sd",
          "lineNumber" : 50,
          "columnNumber" : 143,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "customer",
          "lineNumber" : 80,
          "columnNumber" : 42,
          "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
          "excerpt" : "        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer);\n                return ResponseEntity.ok(customer); /* <=== */ \n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n            }"
        },
        {
          "sample" : "user",
          "lineNumber" : 27,
          "columnNumber" : 7,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
          "excerpt" : "\tprivate CustomerDao customerDao;\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username);\n\t\tif (user == null) { /* <=== */ \n\t\t\tLOG.warn(\"Username {} not found\", username);\n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);\n\t}"
        },
        {
          "sample" : "acc1",
          "lineNumber" : 110,
          "columnNumber" : 38,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }\n            return ResponseEntity.ok(acc1); /* <=== */ \n        } catch (Exception e) {\n            System.out.println(\"Error is \" + e);\n            return new ResponseEntity<>(e.getMessage(), new HttpHeaders(), HttpStatus.BAD_REQUEST);\n        }\n    }"
        },
        {
          "sample" : "transaction",
          "lineNumber" : 64,
          "columnNumber" : 124,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
          "excerpt" : "                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType()); /* <=== */ \n\n                transferDao.save(pt);\n                return true;\n\n            }"
        },
        {
          "sample" : "this.recipientAccountNo",
          "lineNumber" : 115,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
          "excerpt" : "    public long getRecipientAccountNo() {\n        return recipientAccountNo;\n    }\n\n    public void setRecipientAccountNo(long recipientAccountNo) {\n        this.recipientAccountNo = recipientAccountNo; /* <=== */ \n    }\n\n    public String getStatus() {\n        return status;\n    }"
        },
        {
          "sample" : "customers",
          "lineNumber" : 15,
          "columnNumber" : 15,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/CustomCustomerDetails.java",
          "excerpt" : "\npublic class CustomCustomerDetails extends Customer implements UserDetails {\n\n    public CustomCustomerDetails(final Customer customers)\n    {\n        super(customers); /* <=== */ \n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n"
        },
        {
          "sample" : "o",
          "lineNumber" : 30,
          "columnNumber" : 25,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Customer.java",
          "excerpt" : "    private Set<Account> accounts;\n\n    private String token;\n\n    public Customer(final Customer o) {\n        this.customerId=o.customerId; /* <=== */ \n        this.customerName=o.customerName;\n        this.userName=o.userName;\n        this.password=o.password;\n        this.token=o.token;\n      //  this.accountId=o.accountId;"
        },
        {
          "sample" : "accountId",
          "lineNumber" : 101,
          "columnNumber" : 26,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "    public long getAccountId() {\n        return accountId;\n    }\n\n    public void setAccountId(long accountId) {\n        this.accountId = accountId; /* <=== */ \n    }\n\n\n    public String getBankIfsc() {\n        return bankIfsc;"
        },
        {
          "sample" : "schedule",
          "lineNumber" : 100,
          "columnNumber" : 22,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/BatchConfiguration.java",
          "excerpt" : "\n    public class UserRowMapper implements RowMapper<Schedule>{\n\n        @Override\n        public Schedule mapRow(ResultSet rs, int rowNum) throws SQLException {\n            Schedule schedule = new Schedule(); /* <=== */ \n            schedule.setScheduleid(rs.getInt(\"scheduleid\"));\n            schedule.setAccountId(rs.getLong(\"accountid\"));\n            schedule.setAmount(rs.getFloat(\"amount\"));\n            schedule.setDates(rs.getDate(\"dates\"));\n            schedule.setRecipientAccountNo(rs.getLong(\"recipientaccountno\"));"
        },
        {
          "sample" : "$obj1",
          "lineNumber" : -1,
          "columnNumber" : -1,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/AuthenticationProvider.java",
          "excerpt" : ""
        },
        {
          "sample" : "recipientAccountNo",
          "lineNumber" : 76,
          "columnNumber" : 29,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
          "excerpt" : "\t\tthis.date = date;\n\t\tthis.description = description;\n\t\tthis.status = status;\n\t\tthis.amount = amount;\n\t\tthis.recipientName = recipientName;\n\t\tthis.recipientAccountNo = recipientAccountNo; /* <=== */ \n\t\tthis.accountId = accountId;\n\t\tthis.localDateTime=localDateTime;\n\t\tthis.type=type;\n\t}\n"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.NationalIdentificationNumbers.Passport",
      "occurrences" : [
        {
          "sample" : "recipientAccount",
          "lineNumber" : 52,
          "columnNumber" : 21,
          "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
          "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
        },
        {
          "sample" : "this",
          "lineNumber" : 77,
          "columnNumber" : 9,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Proof.java",
          "excerpt" : "    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob; /* <=== */ \n    }\n\n    public int getAge() {\n        return age;\n    }"
        },
        {
          "sample" : "account",
          "lineNumber" : 86,
          "columnNumber" : 25,
          "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
          "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
        },
        {
          "sample" : "proof",
          "lineNumber" : 144,
          "columnNumber" : 22,
          "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
          "excerpt" : "    public Proof getProof() {\n        return proof;\n    }\n\n    public void setProof(Proof proof) {\n        this.proof = proof; /* <=== */ \n    }\n\n    public String getFirstName() {\n        return firstName;\n    }"
        }
      ]
    }
  ],
  "dataFlow" : {
    "storages" : [
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7316-7319-7330-5810-5833-5830-5845-5842-5841",
                "path" : [
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 88,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.otherBankAccountDao",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "otherBankAccountDao.save(recipientAccount)",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9037-9045-9051-9068-4882-4884-4890-9067-9064-2122-2128-9063-9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "sd",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    @Override\n    @Transactional\n    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad /* <=== */ \n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 45,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) { /* <=== */ \n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 47,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "        this.type = type;\n    }\n    @Column(nullable = true)\n    private long accountId;\n\n    public long getAccountId() { /* <=== */ \n        return accountId;\n    }\n\n    public void setAccountId(long accountId) {\n        this.accountId = accountId;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 47,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "        this.type = type;\n    }\n    @Column(nullable = true)\n    private long accountId;\n\n    public long getAccountId() { /* <=== */ \n        return accountId;\n    }\n\n    public void setAccountId(long accountId) {\n        this.accountId = accountId;"
                  },
                  {
                    "sample" : "sd.getAccountId()",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "7273-7282-4267-4269-4275-7281-2123-11437-7281-7278-2122-11436-7278-7277",
                "path" : [
                  {
                    "sample" : "transaction",
                    "lineNumber" : 34,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo(); /* <=== */ \n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 53,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 53,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(transaction.getRecipientAccountNo())",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  }
                ]
              },
              {
                "pathId" : "7366-5917-5943-5939",
                "path" : [
                  {
                    "sample" : "accountId",
                    "lineNumber" : 52,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    }\n\n    @GetMapping(\"/transactionHistory/{accountId}\")\n    public ResponseEntity getTransactionList(@PathVariable long accountId) {\n\n        Set<PrimaryTransaction> pt = transferService.getTransactionHistoryByAccountID(accountId); /* <=== */ \n        List<PrimaryTransaction> pp = new ArrayList<>();\n        for (PrimaryTransaction p : pt\n        ) {\n            pp.add(p);\n        }"
                  },
                  {
                    "sample" : "accountId",
                    "lineNumber" : 109,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            throw new Exception(e.getMessage());\n        }\n        return false;\n    }\n\n    public Set<PrimaryTransaction> getTransactionHistoryByAccountID(long accountId) { /* <=== */ \n        List<PrimaryTransaction> transactionList=new ArrayList<>();\n        Set<PrimaryTransaction> trans=new HashSet<>();\n        Set<PrimaryTransaction> trans1=new HashSet<>();\n        trans=transferDao.findByAccountId(accountId);\n        trans1=transferDao.findByRecipientAccountNo(accountId);"
                  },
                  {
                    "sample" : "accountId",
                    "lineNumber" : 113,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n    public Set<PrimaryTransaction> getTransactionHistoryByAccountID(long accountId) {\n        List<PrimaryTransaction> transactionList=new ArrayList<>();\n        Set<PrimaryTransaction> trans=new HashSet<>();\n        Set<PrimaryTransaction> trans1=new HashSet<>();\n        trans=transferDao.findByAccountId(accountId); /* <=== */ \n        trans1=transferDao.findByRecipientAccountNo(accountId);\n        trans.addAll(trans1);\n\n//        transactionList=transferDao.findByAccountId(accountId);\n"
                  },
                  {
                    "sample" : "transferDao.findByAccountId(accountId)",
                    "lineNumber" : 113,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n    public Set<PrimaryTransaction> getTransactionHistoryByAccountID(long accountId) {\n        List<PrimaryTransaction> transactionList=new ArrayList<>();\n        Set<PrimaryTransaction> trans=new HashSet<>();\n        Set<PrimaryTransaction> trans1=new HashSet<>();\n        trans=transferDao.findByAccountId(accountId); /* <=== */ \n        trans1=transferDao.findByRecipientAccountNo(accountId);\n        trans.addAll(trans1);\n\n//        transactionList=transferDao.findByAccountId(accountId);\n"
                  }
                ]
              },
              {
                "pathId" : "7123-7146-7142",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 63,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "userId",
                    "lineNumber" : 68,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "customerDao.findByUserId(userId)",
                    "lineNumber" : 68,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  }
                ]
              },
              {
                "pathId" : "7413-7409",
                "path" : [
                  {
                    "sample" : "accountId",
                    "lineNumber" : 67,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n\n    @GetMapping(\"/balance/{accountId}\")\n    public ResponseEntity getBalance(@PathVariable long accountId) {\n\n        Account account = accountDao.findByAccountId(accountId); /* <=== */ \n        return ResponseEntity.ok(account);\n    }\n\n    @GetMapping(\"/balanceAmountOnly/{accountId}\")\n    public ResponseEntity balanceAmountOnly(@PathVariable long accountId) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(accountId)",
                    "lineNumber" : 67,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n\n    @GetMapping(\"/balance/{accountId}\")\n    public ResponseEntity getBalance(@PathVariable long accountId) {\n\n        Account account = accountDao.findByAccountId(accountId); /* <=== */ \n        return ResponseEntity.ok(account);\n    }\n\n    @GetMapping(\"/balanceAmountOnly/{accountId}\")\n    public ResponseEntity balanceAmountOnly(@PathVariable long accountId) {"
                  }
                ]
              },
              {
                "pathId" : "7273-7282-4267-4269-4275-7281-2123-11437-7281-7278-2122-11436-7278-7288-10080-10083-7287-7286",
                "path" : [
                  {
                    "sample" : "transaction",
                    "lineNumber" : 34,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo(); /* <=== */ \n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 53,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 53,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(transaction.getAccountId())",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  }
                ]
              },
              {
                "pathId" : "7437-7433",
                "path" : [
                  {
                    "sample" : "accountId",
                    "lineNumber" : 74,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    }\n\n    @GetMapping(\"/balanceAmountOnly/{accountId}\")\n    public ResponseEntity balanceAmountOnly(@PathVariable long accountId) {\n\n        Account account = accountDao.findByAccountId(accountId); /* <=== */ \n        return ResponseEntity.ok(account.getBalance());\n    }\n}"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(accountId)",
                    "lineNumber" : 74,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    }\n\n    @GetMapping(\"/balanceAmountOnly/{accountId}\")\n    public ResponseEntity balanceAmountOnly(@PathVariable long accountId) {\n\n        Account account = accountDao.findByAccountId(accountId); /* <=== */ \n        return ResponseEntity.ok(account.getBalance());\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "7366-5917-5943-5950-5946",
                "path" : [
                  {
                    "sample" : "accountId",
                    "lineNumber" : 52,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    }\n\n    @GetMapping(\"/transactionHistory/{accountId}\")\n    public ResponseEntity getTransactionList(@PathVariable long accountId) {\n\n        Set<PrimaryTransaction> pt = transferService.getTransactionHistoryByAccountID(accountId); /* <=== */ \n        List<PrimaryTransaction> pp = new ArrayList<>();\n        for (PrimaryTransaction p : pt\n        ) {\n            pp.add(p);\n        }"
                  },
                  {
                    "sample" : "accountId",
                    "lineNumber" : 109,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            throw new Exception(e.getMessage());\n        }\n        return false;\n    }\n\n    public Set<PrimaryTransaction> getTransactionHistoryByAccountID(long accountId) { /* <=== */ \n        List<PrimaryTransaction> transactionList=new ArrayList<>();\n        Set<PrimaryTransaction> trans=new HashSet<>();\n        Set<PrimaryTransaction> trans1=new HashSet<>();\n        trans=transferDao.findByAccountId(accountId);\n        trans1=transferDao.findByRecipientAccountNo(accountId);"
                  },
                  {
                    "sample" : "accountId",
                    "lineNumber" : 113,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n    public Set<PrimaryTransaction> getTransactionHistoryByAccountID(long accountId) {\n        List<PrimaryTransaction> transactionList=new ArrayList<>();\n        Set<PrimaryTransaction> trans=new HashSet<>();\n        Set<PrimaryTransaction> trans1=new HashSet<>();\n        trans=transferDao.findByAccountId(accountId); /* <=== */ \n        trans1=transferDao.findByRecipientAccountNo(accountId);\n        trans.addAll(trans1);\n\n//        transactionList=transferDao.findByAccountId(accountId);\n"
                  },
                  {
                    "sample" : "accountId",
                    "lineNumber" : 114,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    public Set<PrimaryTransaction> getTransactionHistoryByAccountID(long accountId) {\n        List<PrimaryTransaction> transactionList=new ArrayList<>();\n        Set<PrimaryTransaction> trans=new HashSet<>();\n        Set<PrimaryTransaction> trans1=new HashSet<>();\n        trans=transferDao.findByAccountId(accountId);\n        trans1=transferDao.findByRecipientAccountNo(accountId); /* <=== */ \n        trans.addAll(trans1);\n\n//        transactionList=transferDao.findByAccountId(accountId);\n\n//        List<PrimaryTransaction> transactionList1=new ArrayList<>();"
                  },
                  {
                    "sample" : "transferDao.findByRecipientAccountNo(accountId)",
                    "lineNumber" : 114,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    public Set<PrimaryTransaction> getTransactionHistoryByAccountID(long accountId) {\n        List<PrimaryTransaction> transactionList=new ArrayList<>();\n        Set<PrimaryTransaction> trans=new HashSet<>();\n        Set<PrimaryTransaction> trans1=new HashSet<>();\n        trans=transferDao.findByAccountId(accountId);\n        trans1=transferDao.findByRecipientAccountNo(accountId); /* <=== */ \n        trans.addAll(trans1);\n\n//        transactionList=transferDao.findByAccountId(accountId);\n\n//        List<PrimaryTransaction> transactionList1=new ArrayList<>();"
                  }
                ]
              },
              {
                "pathId" : "9037-9045-9051-5025-5027-5033-9050-9049-9059-2123-11437-9059-9056-2122-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9063",
                "path" : [
                  {
                    "sample" : "sd",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    @Override\n    @Transactional\n    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad /* <=== */ \n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 45,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) { /* <=== */ \n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 47,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 110,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "\n    public void setScheduleid(int scheduleid) {\n        this.scheduleid = scheduleid;\n    }\n\n    public long getRecipientAccountNo() { /* <=== */ \n        return recipientAccountNo;\n    }\n\n    public void setRecipientAccountNo(long recipientAccountNo) {\n        this.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 110,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "\n    public void setScheduleid(int scheduleid) {\n        this.scheduleid = scheduleid;\n    }\n\n    public long getRecipientAccountNo() { /* <=== */ \n        return recipientAccountNo;\n    }\n\n    public void setRecipientAccountNo(long recipientAccountNo) {\n        this.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "sd.getRecipientAccountNo()",
                    "lineNumber" : 47,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 47,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9037-9045-9051-9068-4882-4884-4890-9067-9064-2122-2128-9063-9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "sd",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    @Override\n    @Transactional\n    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad /* <=== */ \n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 45,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) { /* <=== */ \n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 47,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "        this.type = type;\n    }\n    @Column(nullable = true)\n    private long accountId;\n\n    public long getAccountId() { /* <=== */ \n        return accountId;\n    }\n\n    public void setAccountId(long accountId) {\n        this.accountId = accountId;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 47,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "        this.type = type;\n    }\n    @Column(nullable = true)\n    private long accountId;\n\n    public long getAccountId() { /* <=== */ \n        return accountId;\n    }\n\n    public void setAccountId(long accountId) {\n        this.accountId = accountId;"
                  },
                  {
                    "sample" : "sd.getAccountId()",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "7123-7146-7143-2236-2242-7142-7141-7149-7181-7191-7197-7194-7193",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 63,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "userId",
                    "lineNumber" : 68,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 68,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 12,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/CustomerDao.java",
                    "excerpt" : "import org.springframework.stereotype.Service;\n\n@Service\npublic interface CustomerDao extends JpaRepository<Customer, Long> {\n    Customer findByUserNameContainingIgnoreCase(String username);\n    Customer findByUserId(long userId); /* <=== */ \n    Customer findByToken(String token);\n\n    @Query(value = \"SELECT nextval('username')\", nativeQuery =\n            true)\n    Long getNextCustomerId();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 12,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/CustomerDao.java",
                    "excerpt" : "import org.springframework.stereotype.Service;\n\n@Service\npublic interface CustomerDao extends JpaRepository<Customer, Long> {\n    Customer findByUserNameContainingIgnoreCase(String username);\n    Customer findByUserId(long userId); /* <=== */ \n    Customer findByToken(String token);\n\n    @Query(value = \"SELECT nextval('username')\", nativeQuery =\n            true)\n    Long getNextCustomerId();"
                  },
                  {
                    "sample" : "customerDao.findByUserId(userId)",
                    "lineNumber" : 68,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 68,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 69,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);\n        if(customer==null) /* <=== */ \n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }\n        else"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 76,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }\n        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){ /* <=== */ \n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer);\n                return ResponseEntity.ok(customer);\n            }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        }\n        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token); /* <=== */ \n                customerDao.save(customer);\n                return ResponseEntity.ok(customer);\n            }\n            else\n            {"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 79,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 79,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 79,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  }
                ]
              },
              {
                "pathId" : "5871-5874-5894-5891-5890",
                "path" : [
                  {
                    "sample" : "pt",
                    "lineNumber" : 96,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 96,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 99,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "this.transferDao",
                    "lineNumber" : 99,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "transferDao.save(pt)",
                    "lineNumber" : 99,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "9037-9045-9051-9068-9079-9081-9083-9085-9088-9107-9123-9129-9126-9125",
                "path" : [
                  {
                    "sample" : "sd",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    @Override\n    @Transactional\n    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad /* <=== */ \n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 45,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) { /* <=== */ \n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 47,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 104,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 120,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 143,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 171,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 196,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 53,
                    "columnNumber" : 103,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 59,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {\n                        sd.setStatus(\"failed\"); /* <=== */ \n                        scheduleDao.save(sd);\n                    }\n\n                }\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 60,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd); /* <=== */ \n                    }\n\n                }\n\n            } else {"
                  },
                  {
                    "sample" : "this.scheduleDao",
                    "lineNumber" : 60,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd); /* <=== */ \n                    }\n\n                }\n\n            } else {"
                  },
                  {
                    "sample" : "scheduleDao.save(sd)",
                    "lineNumber" : 60,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd); /* <=== */ \n                    }\n\n                }\n\n            } else {"
                  }
                ]
              },
              {
                "pathId" : "7273-7282-7291-4519-4521-4527-7290-2123-11437-7290-7287-2122-2128-7286-7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "transaction",
                    "lineNumber" : 34,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo(); /* <=== */ \n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 36,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 163,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\tpublic void setPhoneNo(long phoneNo) {\n\t\tthis.phoneNo = phoneNo;\n\t}\n\n\n\tpublic long getAccountId() { /* <=== */ \n\t\treturn accountId;\n\t}\n\n\tpublic void setAccountId(long accountId) {\n\t\tthis.accountId = accountId;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 163,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\tpublic void setPhoneNo(long phoneNo) {\n\t\tthis.phoneNo = phoneNo;\n\t}\n\n\n\tpublic long getAccountId() { /* <=== */ \n\t\treturn accountId;\n\t}\n\n\tpublic void setAccountId(long accountId) {\n\t\tthis.accountId = accountId;"
                  },
                  {
                    "sample" : "transaction.getAccountId()",
                    "lineNumber" : 36,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "transaction.getAccountId()",
                    "lineNumber" : 36,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(transaction.getAccountId())",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9037-9045-9051-9068-4882-4884-4890-9067-2123-11437-9067-9064-2122-11436-9064-9117-10080-10083-9116-9101-5702-5784-5783",
                "path" : [
                  {
                    "sample" : "sd",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    @Override\n    @Transactional\n    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad /* <=== */ \n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 45,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) { /* <=== */ \n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 47,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "        this.type = type;\n    }\n    @Column(nullable = true)\n    private long accountId;\n\n    public long getAccountId() { /* <=== */ \n        return accountId;\n    }\n\n    public void setAccountId(long accountId) {\n        this.accountId = accountId;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 47,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Schedule.java",
                    "excerpt" : "        this.type = type;\n    }\n    @Column(nullable = true)\n    private long accountId;\n\n    public long getAccountId() { /* <=== */ \n        return accountId;\n    }\n\n    public void setAccountId(long accountId) {\n        this.accountId = accountId;"
                  },
                  {
                    "sample" : "sd.getAccountId()",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "sd.getAccountId()",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferDao",
                    "lineNumber" : 66,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "transferDao.save(pt)",
                    "lineNumber" : 66,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "9037-9045-9051-9068-9079-9081-9083-9085-9088-9107-9123-9129-9126-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "sd",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    @Override\n    @Transactional\n    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad /* <=== */ \n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 45,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "    public void write(List<? extends Schedule> list) throws Exception {\n        List<Schedule> ad = (List<Schedule>) list;\n        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) { /* <=== */ \n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 47,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        Date today = new Date();\n        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo(); /* <=== */ \n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 49,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 104,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 120,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 143,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 171,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 50,
                    "columnNumber" : 196,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType()); /* <=== */ \n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 53,
                    "columnNumber" : 103,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 59,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {\n                        sd.setStatus(\"failed\"); /* <=== */ \n                        scheduleDao.save(sd);\n                    }\n\n                }\n"
                  },
                  {
                    "sample" : "sd",
                    "lineNumber" : 60,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd); /* <=== */ \n                    }\n\n                }\n\n            } else {"
                  },
                  {
                    "sample" : "this.scheduleDao",
                    "lineNumber" : 60,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd); /* <=== */ \n                    }\n\n                }\n\n            } else {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "7316-7319-7330-5810-5833-5830-5845-5842-5841",
                "path" : [
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 88,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.otherBankAccountDao",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "otherBankAccountDao.save(recipientAccount)",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "6989-6993-6999-6996-6995",
                "path" : [
                  {
                    "sample" : "schedule",
                    "lineNumber" : 27,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerController.java",
                    "excerpt" : "   ScheduleDao scheduleDao;\n\n    @PostMapping(\"/scheduleTransaction\")\n        public void scheduleJob(@RequestBody ScheduleList scheduleList)\n    {\n        for (Schedule schedule: scheduleList.getSchedule()) { /* <=== */ \n                schedule.setStatus(\"scheduled\");\n\n            scheduleDao.save(schedule);\n        }\n    }"
                  },
                  {
                    "sample" : "schedule",
                    "lineNumber" : 28,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerController.java",
                    "excerpt" : "\n    @PostMapping(\"/scheduleTransaction\")\n        public void scheduleJob(@RequestBody ScheduleList scheduleList)\n    {\n        for (Schedule schedule: scheduleList.getSchedule()) {\n                schedule.setStatus(\"scheduled\"); /* <=== */ \n\n            scheduleDao.save(schedule);\n        }\n    }\n"
                  },
                  {
                    "sample" : "schedule",
                    "lineNumber" : 30,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerController.java",
                    "excerpt" : "        public void scheduleJob(@RequestBody ScheduleList scheduleList)\n    {\n        for (Schedule schedule: scheduleList.getSchedule()) {\n                schedule.setStatus(\"scheduled\");\n\n            scheduleDao.save(schedule); /* <=== */ \n        }\n    }\n\n\n"
                  },
                  {
                    "sample" : "this.scheduleDao",
                    "lineNumber" : 30,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerController.java",
                    "excerpt" : "        public void scheduleJob(@RequestBody ScheduleList scheduleList)\n    {\n        for (Schedule schedule: scheduleList.getSchedule()) {\n                schedule.setStatus(\"scheduled\");\n\n            scheduleDao.save(schedule); /* <=== */ \n        }\n    }\n\n\n"
                  },
                  {
                    "sample" : "scheduleDao.save(schedule)",
                    "lineNumber" : 30,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerController.java",
                    "excerpt" : "        public void scheduleJob(@RequestBody ScheduleList scheduleList)\n    {\n        for (Schedule schedule: scheduleList.getSchedule()) {\n                schedule.setStatus(\"scheduled\");\n\n            scheduleDao.save(schedule); /* <=== */ \n        }\n    }\n\n\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "7273-7282-4267-4269-4275-7281-2123-11437-7281-7278-2122-11436-7278-7277",
                "path" : [
                  {
                    "sample" : "transaction",
                    "lineNumber" : 34,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo(); /* <=== */ \n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 53,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 53,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(transaction.getRecipientAccountNo())",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  }
                ]
              },
              {
                "pathId" : "7273-7282-4267-4269-4275-7281-2123-11437-7281-7278-2122-11436-7278-7288-10080-10083-7287-7286",
                "path" : [
                  {
                    "sample" : "transaction",
                    "lineNumber" : 34,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo(); /* <=== */ \n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 53,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 53,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\n\n\tprivate long accountId;\n\n\n\tpublic long getRecipientAccountNo() { /* <=== */ \n\t\treturn recipientAccountNo;\n\t}\n\n\tpublic void setRecipientAccountNo(long recipientAccountNo) {\n\t\tthis.recipientAccountNo = recipientAccountNo;"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "transaction.getRecipientAccountNo()",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 35,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(transaction.getAccountId())",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "5871-5874-5894-5891-5890",
                "path" : [
                  {
                    "sample" : "pt",
                    "lineNumber" : 96,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 96,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 99,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "this.transferDao",
                    "lineNumber" : 99,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "transferDao.save(pt)",
                    "lineNumber" : 99,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7273-7282-7291-4519-4521-4527-7290-2123-11437-7290-7287-2122-2128-7286-7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "transaction",
                    "lineNumber" : 34,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo(); /* <=== */ \n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 35,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo()); /* <=== */ \n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n"
                  },
                  {
                    "sample" : "transaction",
                    "lineNumber" : 36,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 163,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\tpublic void setPhoneNo(long phoneNo) {\n\t\tthis.phoneNo = phoneNo;\n\t}\n\n\n\tpublic long getAccountId() { /* <=== */ \n\t\treturn accountId;\n\t}\n\n\tpublic void setAccountId(long accountId) {\n\t\tthis.accountId = accountId;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 163,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/PrimaryTransaction.java",
                    "excerpt" : "\tpublic void setPhoneNo(long phoneNo) {\n\t\tthis.phoneNo = phoneNo;\n\t}\n\n\n\tpublic long getAccountId() { /* <=== */ \n\t\treturn accountId;\n\t}\n\n\tpublic void setAccountId(long accountId) {\n\t\tthis.accountId = accountId;"
                  },
                  {
                    "sample" : "transaction.getAccountId()",
                    "lineNumber" : 36,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "transaction.getAccountId()",
                    "lineNumber" : 36,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(transaction.getAccountId())",
                    "lineNumber" : 36,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "5764-5767-5787-5784-5783",
                "path" : [
                  {
                    "sample" : "pt",
                    "lineNumber" : 63,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 63,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 66,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "this.transferDao",
                    "lineNumber" : 66,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "transferDao.save(pt)",
                    "lineNumber" : 66,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "5764-5767-5787-5784-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "pt",
                    "lineNumber" : 63,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 63,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(), /* <=== */ \n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt);\n                return true;\n"
                  },
                  {
                    "sample" : "pt",
                    "lineNumber" : 66,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "this.transferDao",
                    "lineNumber" : 66,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());\n\n                PrimaryTransaction pt = new PrimaryTransaction(d, transaction.getDescription(), \"completed\", transaction.getAmount(),\n                        transaction.getRecipientName(), transaction.getRecipientAccountNo(), transaction.getAccountId(),ld,transaction.getType());\n\n                transferDao.save(pt); /* <=== */ \n                return true;\n\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "7141-7149-7181-7191-7197-7194-7193",
                "path" : [
                  {
                    "sample" : "customer",
                    "lineNumber" : 68,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 69,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);\n        if(customer==null) /* <=== */ \n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }\n        else"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 76,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }\n        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){ /* <=== */ \n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer);\n                return ResponseEntity.ok(customer);\n            }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        }\n        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token); /* <=== */ \n                customerDao.save(customer);\n                return ResponseEntity.ok(customer);\n            }\n            else\n            {"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 79,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 79,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 79,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "7316-7319-7330-5810-5833-5830-5845-5842-5841",
                "path" : [
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 88,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.otherBankAccountDao",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "otherBankAccountDao.save(recipientAccount)",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1406-1423-1422-1421-1431-1427",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 46,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        }\n        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0]; /* <=== */ \n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 48,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase(); /* <=== */ \n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {"
                  },
                  {
                    "sample" : "username.toLowerCase()",
                    "lineNumber" : 48,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase(); /* <=== */ \n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 48,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase(); /* <=== */ \n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 50,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username); /* <=== */ \n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();"
                  },
                  {
                    "sample" : "adminDao.findByUserName(username)",
                    "lineNumber" : 50,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username); /* <=== */ \n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "7115-7126-7124-7123-7146-7142",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 62,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            // TODO Auto-generated catch block\n            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0]; /* <=== */ \n        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 63,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "Long.parseLong(username)",
                    "lineNumber" : 63,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "userId",
                    "lineNumber" : 63,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "userId",
                    "lineNumber" : 68,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "customerDao.findByUserId(userId)",
                    "lineNumber" : 68,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  }
                ]
              },
              {
                "pathId" : "1652-1648",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 27,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/service/UserSecurityService.java",
                    "excerpt" : "    @Autowired\n    private AdminDao adminDao;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Admin user = adminDao.findByUserName(username); /* <=== */ \n        if (user == null) {\n            LOG.warn(\"Username {} not found\", username);\n            throw new UsernameNotFoundException(\"Username \" + username + \" not found\");\n        }\n        return new CustomAdminDetails(user);"
                  },
                  {
                    "sample" : "adminDao.findByUserName(username)",
                    "lineNumber" : 27,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/service/UserSecurityService.java",
                    "excerpt" : "    @Autowired\n    private AdminDao adminDao;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Admin user = adminDao.findByUserName(username); /* <=== */ \n        if (user == null) {\n            LOG.warn(\"Username {} not found\", username);\n            throw new UsernameNotFoundException(\"Username \" + username + \" not found\");\n        }\n        return new CustomAdminDetails(user);"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              },
              {
                "pathId" : "6015-6011",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 26,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
                    "excerpt" : "\t@Autowired\n\tprivate CustomerDao customerDao;\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username); /* <=== */ \n\t\tif (user == null) {\n\t\t\tLOG.warn(\"Username {} not found\", username);\n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);"
                  },
                  {
                    "sample" : "customerDao.findByUserNameContainingIgnoreCase(username)",
                    "lineNumber" : 26,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
                    "excerpt" : "\t@Autowired\n\tprivate CustomerDao customerDao;\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username); /* <=== */ \n\t\tif (user == null) {\n\t\t\tLOG.warn(\"Username {} not found\", username);\n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "7115-7126-7124-7123-7146-7143-2236-2242-7142-7141-7149-7181-7191-7197-7194-7193",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 62,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            // TODO Auto-generated catch block\n            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0]; /* <=== */ \n        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 63,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "Long.parseLong(username)",
                    "lineNumber" : 63,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "userId",
                    "lineNumber" : 63,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            return new ResponseEntity<>(\"BAD REQUEST\",new HttpHeaders(), HttpStatus.BAD_REQUEST);\n\n        }\n        decodedAuth = new String(bytes);\n        String username = decodedAuth.split(\":\")[0];\n        long userId = Long.parseLong(username); /* <=== */ \n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);"
                  },
                  {
                    "sample" : "userId",
                    "lineNumber" : 68,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 68,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 12,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/CustomerDao.java",
                    "excerpt" : "import org.springframework.stereotype.Service;\n\n@Service\npublic interface CustomerDao extends JpaRepository<Customer, Long> {\n    Customer findByUserNameContainingIgnoreCase(String username);\n    Customer findByUserId(long userId); /* <=== */ \n    Customer findByToken(String token);\n\n    @Query(value = \"SELECT nextval('username')\", nativeQuery =\n            true)\n    Long getNextCustomerId();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 12,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/CustomerDao.java",
                    "excerpt" : "import org.springframework.stereotype.Service;\n\n@Service\npublic interface CustomerDao extends JpaRepository<Customer, Long> {\n    Customer findByUserNameContainingIgnoreCase(String username);\n    Customer findByUserId(long userId); /* <=== */ \n    Customer findByToken(String token);\n\n    @Query(value = \"SELECT nextval('username')\", nativeQuery =\n            true)\n    Long getNextCustomerId();"
                  },
                  {
                    "sample" : "customerDao.findByUserId(userId)",
                    "lineNumber" : 68,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 68,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        long userId = Long.parseLong(username);\n\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId); /* <=== */ \n        if(customer==null)\n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 69,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username=username.toLowerCase();\n\n        Customer customer = customerDao.findByUserId(userId);\n        if(customer==null) /* <=== */ \n        {\n            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }\n        else"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 76,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "            System.out.println(\"customer is null\");\n            return new ResponseEntity<>(\"Username not found\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);\n        }\n        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){ /* <=== */ \n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer);\n                return ResponseEntity.ok(customer);\n            }"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        }\n        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token); /* <=== */ \n                customerDao.save(customer);\n                return ResponseEntity.ok(customer);\n            }\n            else\n            {"
                  },
                  {
                    "sample" : "customer",
                    "lineNumber" : 79,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 79,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 79,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/CustomerLoginControlller.java",
                    "excerpt" : "        else\n        {\n            if(customer.getPassword().equals(enteredPassword)){\n                String token = UUID.randomUUID().toString();\n                customer.setToken(token);\n                customerDao.save(customer); /* <=== */ \n                return ResponseEntity.ok(customer);\n            }\n            else\n            {\n                return new ResponseEntity<>(\"Username or password is Wrong\",new HttpHeaders(),HttpStatus.UNAUTHORIZED);"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "1406-1423-1422-1421-1431-1428-2160-2166-1427-1426-1434-1461-1471-1477-1474-1473",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 46,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        }\n        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0]; /* <=== */ \n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 48,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase(); /* <=== */ \n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {"
                  },
                  {
                    "sample" : "username.toLowerCase()",
                    "lineNumber" : 48,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase(); /* <=== */ \n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 48,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        decodedAuth = new String(bytes);\n        System.out.println(decodedAuth);\n\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase(); /* <=== */ \n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 50,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username); /* <=== */ \n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();"
                  },
                  {
                    "sample" : "this.adminDao",
                    "lineNumber" : 50,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username); /* <=== */ \n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 11,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AdminDao.java",
                    "excerpt" : "import org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface AdminDao extends CrudRepository<Admin,Long> {\n    Admin findByUserName(String username); /* <=== */ \n    Admin findByToken(String token);\n}"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 11,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AdminDao.java",
                    "excerpt" : "import org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface AdminDao extends CrudRepository<Admin,Long> {\n    Admin findByUserName(String username); /* <=== */ \n    Admin findByToken(String token);\n}"
                  },
                  {
                    "sample" : "adminDao.findByUserName(username)",
                    "lineNumber" : 50,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username); /* <=== */ \n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 50,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username); /* <=== */ \n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 51,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        String username = decodedAuth.split(\":\")[0];\n        String enteredPassword = decodedAuth.split(\":\")[1];\n        username = username.toLowerCase();\n\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) { /* <=== */ \n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();\n                admin.setToken(token);"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 54,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "\n        Admin admin = adminDao.findByUserName(username);\n        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) { /* <=== */ \n                String token = UUID.randomUUID().toString();\n                admin.setToken(token);\n                adminDao.save(admin);\n                return ResponseEntity.ok(admin);\n            } else {"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "        if (admin == null) {\n            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();\n                admin.setToken(token); /* <=== */ \n                adminDao.save(admin);\n                return ResponseEntity.ok(admin);\n            } else {\n                return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n            }"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 57,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();\n                admin.setToken(token);\n                adminDao.save(admin); /* <=== */ \n                return ResponseEntity.ok(admin);\n            } else {\n                return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n            }\n        }"
                  },
                  {
                    "sample" : "this.adminDao",
                    "lineNumber" : 57,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();\n                admin.setToken(token);\n                adminDao.save(admin); /* <=== */ \n                return ResponseEntity.ok(admin);\n            } else {\n                return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n            }\n        }"
                  },
                  {
                    "sample" : "adminDao.save(admin)",
                    "lineNumber" : 57,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AdminLoginController.java",
                    "excerpt" : "            return new ResponseEntity<>(\"Username not found\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        } else {\n            if (admin.getPasswordHash().equals(enteredPassword)) {\n                String token = UUID.randomUUID().toString();\n                admin.setToken(token);\n                adminDao.save(admin); /* <=== */ \n                return ResponseEntity.ok(admin);\n            } else {\n                return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n            }\n        }"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "7316-7319-7330-5810-5833-5830-5845-5842-5841",
                "path" : [
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 88,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.otherBankAccountDao",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "otherBankAccountDao.save(recipientAccount)",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7316-7319-7330-5810-5833-5830-5845-5842-5841",
                "path" : [
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 42,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient); /* <=== */ \n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction);\n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }"
                  },
                  {
                    "sample" : "RecipientAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 85,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 88,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.otherBankAccountDao",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "otherBankAccountDao.save(recipientAccount)",
                    "lineNumber" : 88,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.NationalIdentificationNumbers.Passport",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Read",
            "name" : "JPA Repository(Read)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-11437-9059-9055",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1127",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "customerDao.getNextCustomerId()",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-11761-9101-9116-5960-11773-9116-9057-10080-10083-9056-9064-2122-11436-9064-9063",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(sd.getAccountId())",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Sinks.Database.JPA.Write",
            "name" : "JPA Repository(Write)",
            "category" : "",
            "domains" : [
              "springframework.org"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1129-10080-10083-1128-1168-1167",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId(); /* <=== */ \n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),"
                  },
                  {
                    "sample" : "this.customerDao",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  },
                  {
                    "sample" : "customerDao.save(customer)",
                    "lineNumber" : 104,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer); /* <=== */ \n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password);\n\n\n            }"
                  }
                ]
              },
              {
                "pathId" : "9062-9105-5704-5715-5732-5729-5743-5740-11761-9101-9116-5960-11773-9116-9065-10080-10083-9064-9056-2122-11436-9056-9059-2123-2128-9055-9054-9094-9104-5703-5726-5723-5738-5735-5734",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 49,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 56,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 43,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n\n    @Transactional /* <=== */ \n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 140,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n    }\n\n\n    public void deleteASchedule(Schedule sd) { /* <=== */ \n\n       int a=scheduleDao.removeByScheduleid(sd.getScheduleid());\n    }\n}"
                  },
                  {
                    "sample" : "this.transferService",
                    "lineNumber" : 57,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd); /* <=== */ \n                    } else {\n                        sd.setStatus(\"failed\");\n                        scheduleDao.save(sd);\n                    }\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 49,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId()); /* <=== */ \n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 17,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipient",
                    "lineNumber" : 48,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 17,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/dao/AccountDao.java",
                    "excerpt" : "@Repository\n@Transactional\npublic interface AccountDao extends JpaRepository<Account,Long> {\n    List<Account> findByAccountStatus(Integer status);\n\n    Account findByAccountId(long number); /* <=== */ \n\n\n\n\n"
                  },
                  {
                    "sample" : "accountDao.findByAccountId(recipient)",
                    "lineNumber" : 48,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "accountDao.save(recipientAccount)",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  }
                ]
              },
              {
                "pathId" : "9054-9094-9104-5703-5726-5723-5738-5735-5740-5739",
                "path" : [
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 48,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "        for (Schedule sd : ad\n        ) {\n            if (DateUtils.isSameDay(today, sd.getDates())) {\n\n                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient); /* <=== */ \n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                long recipient = sd.getRecipientAccountNo();\n                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) { /* <=== */ \n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt);\n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 53,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/TransactionScheduling1/src/main/java/com/batch/TransactionScheduling/config/DBWriter.java",
                    "excerpt" : "                Account recipientAccount = accountDao.findByAccountId(recipient);\n                Account primaryAccount = accountDao.findByAccountId(sd.getAccountId());\n                PrimaryTransaction pt = new PrimaryTransaction(today, \"Scheduled Transaction\", \"null\", sd.getAmount(), sd.getRecipientName(), sd.getRecipientAccountNo(), sd.getAccountId(), null, sd.getType());\n                pt.setDate(today);\n                if (recipientAccount != null) {\n                    Boolean b = transferService.addMoneyToRecipient(recipientAccount, primaryAccount, sd.getAmount(), pt); /* <=== */ \n                    if (b) {\n\n                        sd.setStatus(\"completed\");\n                        transferService.deleteASchedule(sd);\n                    } else {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 44,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n\n\n    @Transactional\n    public Boolean addMoneyToRecipient(Account recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 52,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount); /* <=== */ \n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n"
                  },
                  {
                    "sample" : "recipientAccount",
                    "lineNumber" : 55,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 55,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount); /* <=== */ \n                accountDao.save(primaryAccount);\n\n                Date d = new Date();\n                Instant instant = Instant.now();\n"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 56,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                accountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              },
              {
                "pathId" : "947-944-943",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 45,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  },
                  {
                    "sample" : "accountDao.save(account)",
                    "lineNumber" : 45,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception {\n        try {\n            Account acc = accountDao.save(account); /* <=== */ \n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error is \" + e);"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  }
                ]
              },
              {
                "pathId" : "7285-7331-5811-5822-5839-5836-5850-5847-5846",
                "path" : [
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 36,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception {\n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId()); /* <=== */ \n        java.util.Date d = new Date();\n        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 43,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
                    "excerpt" : "        if (recipientAccount != null) {\n            transferService.addMoneyToRecipient(recipientAccount, primaryAccount, transaction.getAmount(), transaction);\n\n        } else {\n            OtherAccount RecipientAccount = new OtherAccount(transaction.getAmount(), (java.sql.Date) d, recipient);\n            transferService.addMoneyToRecipientOfAnotherBank(RecipientAccount, primaryAccount, transaction.getAmount(), transaction); /* <=== */ \n            return ResponseEntity.ok(HttpStatus.OK);\n        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 77,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "        }\n        return false;\n    }\n\n @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception { /* <=== */ \n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 81,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : " @Transactional\n    public Boolean addMoneyToRecipientOfAnotherBank(OtherAccount recipientAccount, Account primaryAccount, double amount, PrimaryTransaction transaction) throws Exception {\n\n\n        try {\n            double moneyPresent = primaryAccount.getBalance() - amount; /* <=== */ \n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 86,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "            double moneyPresent = primaryAccount.getBalance() - amount;\n            if (moneyPresent > 0) {\n\n\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount); /* <=== */ \n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount);\n\n                Date d = new Date();"
                  },
                  {
                    "sample" : "primaryAccount",
                    "lineNumber" : 89,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  },
                  {
                    "sample" : "accountDao.save(primaryAccount)",
                    "lineNumber" : 89,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/TransferService.java",
                    "excerpt" : "\n                recipientAccount.setBalance(recipientAccount.getBalance() + amount);\n                primaryAccount.setBalance(primaryAccount.getBalance() - amount);\n\n                otherBankAccountDao.save(recipientAccount);\n                accountDao.save(primaryAccount); /* <=== */ \n\n                Date d = new Date();\n                Instant instant = Instant.now();\n\n                LocalDateTime ld=LocalDateTime.now(Clock.systemUTC());"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "miscellaneous" : [
    ],
    "internal_apis" : [
    ],
    "leakages" : [
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.NationalIdentificationNumbers.Passport",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Warn",
            "name" : "Log Warn",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1652-1663-1658",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 27,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/service/UserSecurityService.java",
                    "excerpt" : "    @Autowired\n    private AdminDao adminDao;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Admin user = adminDao.findByUserName(username); /* <=== */ \n        if (user == null) {\n            LOG.warn(\"Username {} not found\", username);\n            throw new UsernameNotFoundException(\"Username \" + username + \" not found\");\n        }\n        return new CustomAdminDetails(user);"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 29,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/service/UserSecurityService.java",
                    "excerpt" : "\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Admin user = adminDao.findByUserName(username);\n        if (user == null) {\n            LOG.warn(\"Username {} not found\", username); /* <=== */ \n            throw new UsernameNotFoundException(\"Username \" + username + \" not found\");\n        }\n        return new CustomAdminDetails(user);\n    }\n}"
                  },
                  {
                    "sample" : "LOG.warn(\"Username {} not found\", username)",
                    "lineNumber" : 29,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/service/UserSecurityService.java",
                    "excerpt" : "\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Admin user = adminDao.findByUserName(username);\n        if (user == null) {\n            LOG.warn(\"Username {} not found\", username); /* <=== */ \n            throw new UsernameNotFoundException(\"Username \" + username + \" not found\");\n        }\n        return new CustomAdminDetails(user);\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "6015-6026-6021",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 26,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
                    "excerpt" : "\t@Autowired\n\tprivate CustomerDao customerDao;\n\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username); /* <=== */ \n\t\tif (user == null) {\n\t\t\tLOG.warn(\"Username {} not found\", username);\n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 28,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
                    "excerpt" : "\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username);\n\t\tif (user == null) {\n\t\t\tLOG.warn(\"Username {} not found\", username); /* <=== */ \n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);\n\t}\n}"
                  },
                  {
                    "sample" : "LOG.warn(\"Username {} not found\", username)",
                    "lineNumber" : 28,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/UserSecurityService.java",
                    "excerpt" : "\n\t@Override\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\tCustomer user = customerDao.findByUserNameContainingIgnoreCase(username);\n\t\tif (user == null) {\n\t\t\tLOG.warn(\"Username {} not found\", username); /* <=== */ \n\t\t\tthrow new UsernameNotFoundException(\"Username \" + username + \" not found\");\n\t\t}\n\t\treturn new CustomCustomerDetails(user);\n\t}\n}"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.LanguagePreferences",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "5429-5458-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "language",
                    "lineNumber" : 24,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "        {\n\n            String apiKey=\"Your API Key here\";\n            String sendId=\"FSTSMS\";\n\n            String language=\"english\"; /* <=== */ \n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n"
                  },
                  {
                    "sample" : "language",
                    "lineNumber" : 27,
                    "columnNumber" : 119,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "5429-5458-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "language",
                    "lineNumber" : 24,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "        {\n\n            String apiKey=\"Your API Key here\";\n            String sendId=\"FSTSMS\";\n\n            String language=\"english\"; /* <=== */ \n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n"
                  },
                  {
                    "sample" : "language",
                    "lineNumber" : 27,
                    "columnNumber" : 119,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con.getResponseCode()",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "code",
                    "lineNumber" : 38,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "System.out.println(\"Response code : \" + code)",
                    "lineNumber" : 40,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code); /* <=== */ \n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "new URL(myUrl)",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 44,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "br",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "br.readLine()",
                    "lineNumber" : 48,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 48,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine(); /* <=== */ \n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line);"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 49,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null) /* <=== */ \n                {\n                    break;\n                }\n                response.append(line);\n            }"
                  },
                  {
                    "sample" : "line",
                    "lineNumber" : 53,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "response",
                    "lineNumber" : 53,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                String line=br.readLine();\n                if(line==null)\n                {\n                    break;\n                }\n                response.append(line); /* <=== */ \n            }\n\n            System.out.println(response);\n\n"
                  },
                  {
                    "sample" : "System.out.println(response)",
                    "lineNumber" : 56,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "                    break;\n                }\n                response.append(line);\n            }\n\n            System.out.println(response); /* <=== */ \n\n\n        }catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "third_parties" : [
      {
        "sourceId" : "Data.Sensitive.AccountData.LanguagePreferences",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "5429-5458-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "language",
                    "lineNumber" : 24,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "        {\n\n            String apiKey=\"Your API Key here\";\n            String sendId=\"FSTSMS\";\n\n            String language=\"english\"; /* <=== */ \n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n"
                  },
                  {
                    "sample" : "language",
                    "lineNumber" : 27,
                    "columnNumber" : 119,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "5429-5458-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "language",
                    "lineNumber" : 24,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "        {\n\n            String apiKey=\"Your API Key here\";\n            String sendId=\"FSTSMS\";\n\n            String language=\"english\"; /* <=== */ \n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n"
                  },
                  {
                    "sample" : "language",
                    "lineNumber" : 27,
                    "columnNumber" : 119,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.NationalIdentificationNumbers.Passport",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "Sinks.ThirdParties.API",
            "name" : "Third Party API",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
              "\"https://www.fast2sms.com/dev/bulk?authorization=\""
            ],
            "paths" : [
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5530-5529",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "(HttpsURLConnection) url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 31,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 32,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\"); /* <=== */ \n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 34,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); /* <=== */ \n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 35,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\"); /* <=== */ \n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode();\n\n            System.out.println(\"Response code : \"+code);"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 38,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");\n\n            int code=con.getResponseCode(); /* <=== */ \n\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n"
                  },
                  {
                    "sample" : "con",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  },
                  {
                    "sample" : "con.getInputStream()",
                    "lineNumber" : 44,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n            System.out.println(\"Response code : \"+code);\n\n            StringBuffer response=new StringBuffer();\n\n            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream())); /* <=== */ \n\n            while(true)\n            {\n                String line=br.readLine();\n                if(line==null)"
                  }
                ]
              },
              {
                "pathId" : "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5481",
                "path" : [
                  {
                    "sample" : "account",
                    "lineNumber" : 71,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id); /* <=== */ \n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 72,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception {\n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) { /* <=== */ \n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 77,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id); /* <=== */ \n                account.setAccountStatus(3);\n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 78,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                boolean b = true;\n                long number = 0;\n\n                account.setId(id);\n                account.setAccountStatus(3); /* <=== */ \n                while (b) {\n                    number = (long) (Math.random() * 100000000 * 1000000);\n                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 86,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                    Account existingAcc = accountDao.findByAccountId(number);\n                    if (existingAcc != null) {\n                        continue;\n                    } else {\n                        b = false;\n                        account.setAccountId(number); /* <=== */ \n\n\n                    }\n\n                }"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 93,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "this.accountDao",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "accountDao.saveAndFlush(account)",
                    "lineNumber" : 93,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 93,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                    }\n\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account); /* <=== */ \n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 95,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "\n                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1); /* <=== */ \n            if (acc1 != null && account.getAccountStatus() == 3) {\n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                }\n            }\n            Account acc1 = accountDao.saveAndFlush(account);\n            Set<Account> accountSet = new HashSet<>();\n            accountSet.add(acc1);\n            if (acc1 != null && account.getAccountStatus() == 3) { /* <=== */ \n                long customerId = customerDao.getNextCustomerId();\n                SmsService smsService = new SmsService();\n                char[] charPassword = smsService.generatePassword(10);\n                String password = new String(charPassword);\n                //  String password = charPassword.toString();"
                  },
                  {
                    "sample" : "acc1",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 80,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/entity/Account.java",
                    "excerpt" : "\n\n\n    private String remarks;\n\n    public long getPhoneNo() { /* <=== */ \n        return phoneNo;\n    }\n\n    public void setPhoneno(long phoneno) {\n        this.phoneNo = phoneno;"
                  },
                  {
                    "sample" : "acc1.getPhoneNo()",
                    "lineNumber" : 106,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "String.valueOf(acc1.getPhoneNo())",
                    "lineNumber" : 106,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
                    "excerpt" : "                //  String password = charPassword.toString();\n                Customer customer = new Customer(account.getFirstName() + account.getLastName(),\n                        account.getFirstName(), password, accountSet, null, customerId);\n                customerDao.save(customer);\n                String message = \"your password for Bank Account is \" + password;\n                smsService.sendSms(customerId, String.valueOf(acc1.getPhoneNo()), password); /* <=== */ \n\n\n            }\n            return ResponseEntity.ok(acc1);\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "number",
                    "lineNumber" : 16,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "import java.util.Random;\n\n@Component\npublic class SmsService {\n\n    public static void sendSms(long username,String number,String password) /* <=== */ \n    {\n        try\n        {\n\n            String apiKey=\"Your API Key here\";"
                  },
                  {
                    "sample" : "\"https://www.fast2sms.com/dev/bulk?authorization=\" + apiKey + \"&sender_id=\" + sendId + \"&language=\" + language + \"&route=\" + route + \"&numbers=\" + number + \"&message=\" + 27480 + \"&variables={AA}|{BB}&variables_values=\" + username + '|' + password",
                    "lineNumber" : 27,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 27,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String sendId=\"FSTSMS\";\n\n            String language=\"english\";\n            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password; /* <=== */ \n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");"
                  },
                  {
                    "sample" : "myUrl",
                    "lineNumber" : 30,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 30,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "            String route=\"qt\";\n\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl); /* <=== */ \n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection();\n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");"
                  },
                  {
                    "sample" : "url",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  },
                  {
                    "sample" : "url.openConnection()",
                    "lineNumber" : 31,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/BankData/src/main/java/com/common/BankData/service/SmsService.java",
                    "excerpt" : "\n             String myUrl=\"https://www.fast2sms.com/dev/bulk?authorization=\"+apiKey+\"&sender_id=\"+sendId+\"&language=\"+language+\"&route=\"+route+\"&numbers=\"+number+\"&message=\"+27480+\"&variables={AA}|{BB}&variables_values=\"+username+ '|'+password;\n             //sending get request using java..\n\n            URL url=new URL(myUrl);\n            HttpsURLConnection con=(HttpsURLConnection)url.openConnection(); /* <=== */ \n            con.setRequestMethod(\"GET\");\n\n            con.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            con.setRequestProperty(\"cache-control\", \"no-cache\");\n            System.out.println(\"Wait..............\");"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "collections" : [
    {
      "collectionId" : "Collections.Annotation.Spring",
      "name" : "Spring Web Interface Annotation",
      "isSensitive" : false,
      "collections" : [
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountName",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            },
            {
              "endPoint" : "/transfer/betweenAccounts",
              "sample" : "transaction",
              "lineNumber" : 33,
              "columnNumber" : 43,
              "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
              "excerpt" : "\n    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception { /* <=== */ \n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountID",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            },
            {
              "endPoint" : "/transfer/betweenAccounts",
              "sample" : "transaction",
              "lineNumber" : 33,
              "columnNumber" : 43,
              "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
              "excerpt" : "\n    @Autowired\n    TransferService transferService;\n\n    @PostMapping(\"/betweenAccounts\")\n    public ResponseEntity betweenAccounts(@RequestBody PrimaryTransaction transaction) throws Exception { /* <=== */ \n        long recipient = transaction.getRecipientAccountNo();\n        Account recipientAccount = accountDao.findByAccountId(transaction.getRecipientAccountNo());\n        Account primaryAccount = accountDao.findByAccountId(transaction.getAccountId());\n        java.util.Date d = new Date();\n        if (recipientAccount != null) {"
            },
            {
              "endPoint" : "/transfer/transactionHistory/{accountId}",
              "sample" : "accountId",
              "lineNumber" : 50,
              "columnNumber" : 46,
              "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
              "excerpt" : "        }\n        return ResponseEntity.ok(HttpStatus.OK);\n    }\n\n    @GetMapping(\"/transactionHistory/{accountId}\")\n    public ResponseEntity getTransactionList(@PathVariable long accountId) { /* <=== */ \n\n        Set<PrimaryTransaction> pt = transferService.getTransactionHistoryByAccountID(accountId);\n        List<PrimaryTransaction> pp = new ArrayList<>();\n        for (PrimaryTransaction p : pt\n        ) {"
            },
            {
              "endPoint" : "/transfer/balance/{accountId}",
              "sample" : "accountId",
              "lineNumber" : 65,
              "columnNumber" : 38,
              "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
              "excerpt" : "\n    }\n\n\n    @GetMapping(\"/balance/{accountId}\")\n    public ResponseEntity getBalance(@PathVariable long accountId) { /* <=== */ \n\n        Account account = accountDao.findByAccountId(accountId);\n        return ResponseEntity.ok(account);\n    }\n"
            },
            {
              "endPoint" : "/transfer/balanceAmountOnly/{accountId}",
              "sample" : "accountId",
              "lineNumber" : 72,
              "columnNumber" : 45,
              "fileName" : "/app/code/OnlineBanking/src/main/java/com/banking/OnlineBanking/controller/TransferController.java",
              "excerpt" : "        Account account = accountDao.findByAccountId(accountId);\n        return ResponseEntity.ok(account);\n    }\n\n    @GetMapping(\"/balanceAmountOnly/{accountId}\")\n    public ResponseEntity balanceAmountOnly(@PathVariable long accountId) { /* <=== */ \n\n        Account account = accountDao.findByAccountId(accountId);\n        return ResponseEntity.ok(account.getBalance());\n    }\n}"
            }
          ]
        },
        {
          "sourceId" : "Data.Sensitive.NationalIdentificationNumbers.Passport",
          "occurrences" : [
            {
              "endPoint" : "/accounts/add",
              "sample" : "account",
              "lineNumber" : 43,
              "columnNumber" : 38,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity<>(\"Username or password is Wrong\", new HttpHeaders(), HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @PostMapping(\"/add\")\n    public ResponseEntity addAccount(@RequestBody Account account) throws Exception { /* <=== */ \n        try {\n            Account acc = accountDao.save(account);\n            return ResponseEntity.ok(acc);\n\n        } catch (Exception e) {"
            },
            {
              "endPoint" : "/accounts/update/{id}",
              "sample" : "account",
              "lineNumber" : 69,
              "columnNumber" : 41,
              "fileName" : "/app/code/BackOfficeSystem/src/main/java/com/banking/BackOfficeSystem/controller/AccountController.java",
              "excerpt" : "            return new ResponseEntity(HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    @PutMapping(\"/update/{id}\")\n    public ResponseEntity updateAccount(@RequestBody Account account, @PathVariable long id) throws Exception { /* <=== */ \n        try {\n            account.setId(id);\n            if (account.getAccountStatus() == 3 && account.getAccountId() == 0) {\n\n                boolean b = true;"
            }
          ]
        }
      ]
    }
  ],
  "violations" : [
    {
      "policyId" : "Threats.Leakage.isDataLeakingToLog",
      "policyDetails" : {
        "name" : "PII data is written to the log files",
        "policyType" : "threat",
        "description" : "Sensitive Data written to log files or file system may lead to unauthorized access or exposure to potential attack.",
        "fix" : "It is not recommended to log Sensitive Data to log files or the file system. The data must be encrypted if it is absolutely necessary to log it.",
        "action" : "",
        "tags" : {
          "CWE-359" : "https://cwe.mitre.org/data/definitions/359.html",
          "CWE-532" : "https://cwe.mitre.org/data/definitions/532.html",
          "MSTG-STORAGE-3" : "https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#Testing-Logs-for-Sensitive-Data-MSTG-STORAGE-3",
          "MITRE" : "Sharing.Exposure"
        }
      },
      "dataFlow" : [
        {
          "sourceId" : "Data.Sensitive.NationalIdentificationNumbers.Passport",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountName",
          "sinkId" : "Leakages.Log.Warn",
          "pathIds" : [
            "1652-1663-1658",
            "6015-6026-6021"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountID",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "1035-1041-1045-1057-1060-1095-1104-1101-1100-1099-1113-1117-1184-2622-2624-2630-1183-1181-5414-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.LanguagePreferences",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "5429-5458-5438-5437-5475-5474-5482-5479-5478-5484-5487-5491-5503-5502-5501-5504",
            "5429-5458-5438-5437-5475-5473-5523-5522-5539-5538-5537-5542-5548-5547-5549"
          ]
        }
      ],
      "processing" : null
    }
  ]
}